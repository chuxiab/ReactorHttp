#include "EventLoop.h"
#include "EpollDispatcher.h"
#include "Channel.h"
#include <sys/socket.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

EventLoop::EventLoop()
	:EventLoop(string())
{
}

EventLoop::EventLoop(const string threadName)
{
    m_isQuit = false;
    m_threadID = this_thread::get_id();
    m_threadName = threadName == string() ? "MainThread" : threadName;
    m_dispatcher = new EpollDispatcher(this);
    // 链表
    m_channelMap.clear();
    // map
    int ret = socketpair(AF_UNIX, SOCK_STREAM, 0,m_socketPair);
    if (ret == -1)
    {
        perror("socketpair");
        exit(0);
    }   

#if 0
    // 指定规则: evLoop->socketPair[0] 发送数据, evLoop->socketPair[1] 接收数据
    Channel* channel = new Channel(m_socketPair[1], (int)FDEvent::ReadEvent,
        readLocalMessage, nullptr, nullptr, this);
#else
    auto obj = bind(&EventLoop::readLocalMessage, this);
    Channel* channel = new Channel(m_socketPair[1], (int)FDEvent::ReadEvent,
        obj, nullptr, nullptr, this);

    // channel 添加到任务队列
#endif
    addTask(channel, ElemType::ADD);

}

EventLoop::~EventLoop()
{
}

int EventLoop::run()
{
    // 比较线程ID是否正常
    if (m_threadID != this_thread::get_id())
    {
        return -1;
    }
    // 循环进行事件处理
    while (!m_isQuit)
    {
        m_dispatcher->dispatch();    // 超时时长 2s
        eventLoopProcessTask();
    }
    return 0;

}

int EventLoop::eventActivate(int fd, int event)
{
    if (fd < 0)
    {
        return -1;
    }
    // 取出channel
    struct Channel* channel = m_channelMap[fd];
 
    if (event & (int)FDEvent::ReadEvent && channel->readCallback)
    {
        channel->readCallback(const_cast<void*>(channel->getArg()));
    }
    if (event & (int)FDEvent::WriteEvent && channel->writeCallback)
    {
        channel->writeCallback(const_cast<void*>(channel->getArg()));
    }
    return 0;
}

int EventLoop::addTask(Channel* channel, ElemType type)
{
    // 加锁, 保护共享资源
    m_mutex.lock();
    // 创建新节点
    ChannelElement* node = (ChannelElement*)malloc(sizeof(ChannelElement));
    node->channel = channel;
    node->type = type;
    // 链表为空
    m_taskQ.push(node);  // add     // 后移

    m_mutex.unlock();
    // 处理节点
    /*
    * 细节:
    *   1. 对于链表节点的添加: 可能是当前线程也可能是其他线程(主线程)
    *       1). 修改fd的事件, 当前子线程发起, 当前子线程处理
    *       2). 添加新的fd, 添加任务节点的操作是由主线程发起的
    *   2. 不能让主线程处理任务队列, 需要由当前的子线程取处理
    */
    if (m_threadID == this_thread::get_id())
    {
        // 当前子线程(基于子线程的角度分析)
        eventLoopProcessTask();
    }
    else
    {
        // 主线程 -- 告诉子线程处理任务队列中的任务
        // 1. 子线程在工作 2. 子线程被阻塞了:select, poll, epoll
        taskWakeup();
    }
    return 0;
}

int EventLoop::eventLoopProcessTask()
{
    
    // 取出头结点
    while (!m_taskQ.empty())
    {
        m_mutex.lock();
        ChannelElement* node = m_taskQ.front();
        m_taskQ.pop();
        m_mutex.unlock();
       
        if (node->type == ElemType::ADD)
        {
            // 添加
            add(node->channel);
        }
        else if (node->type == ElemType::DELETE)
        {
            // 删除
            remove(node->channel);
        }
        else if (node->type == ElemType::MODIFY)
        {
            // 修改
            modify(node->channel);
        }
        delete node;
        
    }

    return 0;
}

int EventLoop::add(Channel* channel)
{
    int fd = channel->getSocket();
    
    // 找到fd对应的数组元素位置, 并存储
    if (!m_channelMap.count(fd))
    {
        m_channelMap[fd] = channel;
        m_dispatcher->setChannel(channel);
        int ret = m_dispatcher->add();
        return ret;
    }
    return 0;
}

int EventLoop::remove(Channel* channel)
{
    int fd = channel->getSocket();
    if (!m_channelMap.count(fd))
    {
        return -1;
    }

    m_dispatcher->setChannel(channel);
    int ret = m_dispatcher->remove();
    return 0;
}

int EventLoop::modify(Channel* channel)
{

    int fd = channel->getSocket();
    if (!m_channelMap.count(fd))
    {
        return -1;
    }

    m_dispatcher->setChannel(channel);
    int ret = m_dispatcher->modify();
    return 0;
}

int EventLoop::freeChannel(Channel* channel)
{
    auto it = m_channelMap.find(channel->getSocket());
    if (it != m_channelMap.end())
    {
        m_channelMap.erase(it);
        close(channel->getSocket());
        delete channel;
    }
    return 0;
}

int EventLoop::readMessage()
{
    char buf[1024] = { 0 };
    int len = read(m_socketPair[1], buf, sizeof buf);
    return 0;
}

int EventLoop::readLocalMessage(void* arg)
{
    EventLoop* evLoop = static_cast<EventLoop*>(arg);
    char buf[1024] = { 0 };
    int len = read(evLoop->m_socketPair[1], buf, sizeof buf);
    return 0;
}

void EventLoop::taskWakeup()
{
    const char* msg = "我是要成为世界第一的宝可梦大师";
    write(m_socketPair[0], msg, strlen(msg));
}

